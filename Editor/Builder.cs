using UnityEditor;
using UnityEngine;
using System.Collections.Generic;


namespace AppBuilder {
	public class Builder {
		private static string pre_path = "/Users/HTECPC037/workspace/RunAndJump-master";
		private static string buildFolderPath = pre_path + "/Build";
		private static string batchPath = Application.dataPath + "/Tools/AppBuilder/Bash";
		private static string appBladeKey = "688da84783046456bb3981800e2222d9";


		private static void GenerateBuildInfo() {
			string content = "";
			string hash = GitHash ();
			string date = System.DateTime.Now.ToString ();

			content += "namespace AppBuilder {\n";
			content += "\tpublic class BuildInfo {\n";
			content += string.Format ("\t\tpublic const string Hash = \"{0}\";\n", hash);
			content += string.Format ("\t\tpublic const string Date = \"{0}\";\n", date);
			content += "\t}";
			content += "}";

			string buildInfoPath = Application.dataPath + "/Tools/AppBuilder/Scripts/BuildInfo.Autogenerated.cs";
			System.IO.File.WriteAllText (buildInfoPath, content);
		}

		private static string[] GetEnabledScenes() {
			List<string> scenes = new List<string> ();
			foreach (EditorBuildSettingsScene s in EditorBuildSettings.scenes) {
				if (s.enabled) {
					scenes.Add (s.path);
				}
			}
			return scenes.ToArray ();
		}

		public static void CreateBuildFolder() {
			if (System.IO.Directory.Exists (buildFolderPath)) {
				System.IO.Directory.Delete (buildFolderPath, true);
			}
			System.IO.Directory.CreateDirectory (buildFolderPath);
		}

		public static void Build(BuildTarget target, string buildName) {
			Debug.Log ("buildFolderPath : " + buildFolderPath);

			BuildSettings.UpdateSettings ();
			GenerateBuildInfo ();
			string[] scenes = GetEnabledScenes ();
			string buildFullPath;

			buildFullPath = buildFolderPath + "/" + target + "/" + buildName;
			if (target == BuildTarget.Android) {
				buildFullPath += ".apk";
			}
			BuildPipeline.BuildPlayer (scenes, buildFullPath, target, BuildOptions.None);

			if (target == BuildTarget.Android) {
				Debug.Log ("Build : " + buildFullPath);
				PublishOnAppblade (buildFullPath);
			}
		}
			
		private static string ExecuteCommand(string command, string arguments = "") {
			System.Diagnostics.Process pProcess = new System.Diagnostics.Process ();
			pProcess.StartInfo.FileName = command;
			pProcess.StartInfo.Arguments = arguments;
			pProcess.StartInfo.UseShellExecute = false;
			pProcess.StartInfo.RedirectStandardOutput = true;
			pProcess.Start ();
			string strOutput = pProcess.StandardOutput.ReadToEnd ();
			pProcess.WaitForExit ();
			return strOutput;
		}

		private static string GitHash() {
			string command = batchPath + "/mac_githash.sh";
			string output = ExecuteCommand (command);
			return output.Trim ();
		}

		private static string PublishOnAppblade(string build) {
			string command = batchPath + "/mac_appblade.sh";
			string arguments = string.Format ("{0} {1}", appBladeKey, build);
			string output = ExecuteCommand (command, arguments);
			Debug.Log ("PublishOnAppblade : " + output);
			return output.Trim ();
		}
	}
}
